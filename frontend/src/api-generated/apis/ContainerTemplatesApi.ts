/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContainerTemplateCreateModel,
  ContainerTemplateListModel,
  HttpValidationProblemDetails,
} from '../models/index';
import {
    ContainerTemplateCreateModelFromJSON,
    ContainerTemplateCreateModelToJSON,
    ContainerTemplateListModelFromJSON,
    ContainerTemplateListModelToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
} from '../models/index';

export interface ContainerTemplateReadAllRequest {
    deleted?: boolean;
    containedItemId?: number;
}

export interface ContainerTemplatesIdDeleteRequest {
    id: number;
}

export interface ContainerTemplatesIdPatchRequest {
    id: number;
    containerTemplateCreateModel: ContainerTemplateCreateModel;
}

export interface ContainerTemplatesPostRequest {
    containerTemplateCreateModel: ContainerTemplateCreateModel;
}

/**
 * 
 */
export class ContainerTemplatesApi extends runtime.BaseAPI {

    /**
     */
    async containerTemplateReadAllRaw(requestParameters: ContainerTemplateReadAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContainerTemplateListModel>>> {
        const queryParameters: any = {};

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        if (requestParameters['containedItemId'] != null) {
            queryParameters['containedItemId'] = requestParameters['containedItemId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/container-templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContainerTemplateListModelFromJSON));
    }

    /**
     */
    async containerTemplateReadAll(requestParameters: ContainerTemplateReadAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContainerTemplateListModel>> {
        const response = await this.containerTemplateReadAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async containerTemplatesIdDeleteRaw(requestParameters: ContainerTemplatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerTemplateListModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling containerTemplatesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/container-templates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerTemplateListModelFromJSON(jsonValue));
    }

    /**
     */
    async containerTemplatesIdDelete(requestParameters: ContainerTemplatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerTemplateListModel> {
        const response = await this.containerTemplatesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async containerTemplatesIdPatchRaw(requestParameters: ContainerTemplatesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerTemplateListModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling containerTemplatesIdPatch().'
            );
        }

        if (requestParameters['containerTemplateCreateModel'] == null) {
            throw new runtime.RequiredError(
                'containerTemplateCreateModel',
                'Required parameter "containerTemplateCreateModel" was null or undefined when calling containerTemplatesIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/container-templates/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerTemplateCreateModelToJSON(requestParameters['containerTemplateCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerTemplateListModelFromJSON(jsonValue));
    }

    /**
     */
    async containerTemplatesIdPatch(requestParameters: ContainerTemplatesIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerTemplateListModel> {
        const response = await this.containerTemplatesIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async containerTemplatesPostRaw(requestParameters: ContainerTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerTemplateListModel>> {
        if (requestParameters['containerTemplateCreateModel'] == null) {
            throw new runtime.RequiredError(
                'containerTemplateCreateModel',
                'Required parameter "containerTemplateCreateModel" was null or undefined when calling containerTemplatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/container-templates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerTemplateCreateModelToJSON(requestParameters['containerTemplateCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerTemplateListModelFromJSON(jsonValue));
    }

    /**
     */
    async containerTemplatesPost(requestParameters: ContainerTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerTemplateListModel> {
        const response = await this.containerTemplatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
