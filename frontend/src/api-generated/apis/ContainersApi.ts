/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContainerCreateModel,
  ContainerListModel,
  ContainerPatchModel,
  HttpValidationProblemDetails,
  PageOfContainerListModel,
} from '../models/index';
import {
    ContainerCreateModelFromJSON,
    ContainerCreateModelToJSON,
    ContainerListModelFromJSON,
    ContainerListModelToJSON,
    ContainerPatchModelFromJSON,
    ContainerPatchModelToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    PageOfContainerListModelFromJSON,
    PageOfContainerListModelToJSON,
} from '../models/index';

export interface ContainersIdDeleteRequest {
    id: number;
}

export interface ContainersIdPatchRequest {
    id: number;
    containerPatchModel: ContainerPatchModel;
}

export interface ContainersPostRequest {
    containerCreateModel: ContainerCreateModel;
}

export interface ContainersReadAllRequest {
    page?: number;
    pageSize?: number;
    deleted?: boolean;
    pipeId?: number;
}

/**
 * 
 */
export class ContainersApi extends runtime.BaseAPI {

    /**
     */
    async containersIdDeleteRaw(requestParameters: ContainersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerListModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling containersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/containers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerListModelFromJSON(jsonValue));
    }

    /**
     */
    async containersIdDelete(requestParameters: ContainersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerListModel> {
        const response = await this.containersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async containersIdPatchRaw(requestParameters: ContainersIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerListModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling containersIdPatch().'
            );
        }

        if (requestParameters['containerPatchModel'] == null) {
            throw new runtime.RequiredError(
                'containerPatchModel',
                'Required parameter "containerPatchModel" was null or undefined when calling containersIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/containers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerPatchModelToJSON(requestParameters['containerPatchModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerListModelFromJSON(jsonValue));
    }

    /**
     */
    async containersIdPatch(requestParameters: ContainersIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerListModel> {
        const response = await this.containersIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async containersPostRaw(requestParameters: ContainersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerListModel>> {
        if (requestParameters['containerCreateModel'] == null) {
            throw new runtime.RequiredError(
                'containerCreateModel',
                'Required parameter "containerCreateModel" was null or undefined when calling containersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/containers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContainerCreateModelToJSON(requestParameters['containerCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContainerListModelFromJSON(jsonValue));
    }

    /**
     */
    async containersPost(requestParameters: ContainersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerListModel> {
        const response = await this.containersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async containersReadAllRaw(requestParameters: ContainersReadAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfContainerListModel>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        if (requestParameters['pipeId'] != null) {
            queryParameters['pipeId'] = requestParameters['pipeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/containers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfContainerListModelFromJSON(jsonValue));
    }

    /**
     */
    async containersReadAll(requestParameters: ContainersReadAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfContainerListModel> {
        const response = await this.containersReadAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
