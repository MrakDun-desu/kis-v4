/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CashBoxCreateModel,
  CashBoxDetailModel,
  CashBoxListModel,
  HttpValidationProblemDetails,
} from '../models/index';
import {
    CashBoxCreateModelFromJSON,
    CashBoxCreateModelToJSON,
    CashBoxDetailModelFromJSON,
    CashBoxDetailModelToJSON,
    CashBoxListModelFromJSON,
    CashBoxListModelToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
} from '../models/index';

export interface CashBoxReadRequest {
    id: number;
    startDate?: Date;
    endDate?: Date;
}

export interface CashboxesGetRequest {
    deleted?: boolean;
}

export interface CashboxesIdDeleteRequest {
    id: number;
}

export interface CashboxesIdPutRequest {
    id: number;
    cashBoxCreateModel: CashBoxCreateModel;
}

export interface CashboxesIdStockTakingPostRequest {
    id: number;
}

export interface CashboxesPostRequest {
    cashBoxCreateModel: CashBoxCreateModel;
}

/**
 * 
 */
export class CashBoxesApi extends runtime.BaseAPI {

    /**
     */
    async cashBoxReadRaw(requestParameters: CashBoxReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashBoxDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cashBoxRead().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/cashboxes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashBoxDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async cashBoxRead(requestParameters: CashBoxReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashBoxDetailModel> {
        const response = await this.cashBoxReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cashboxesGetRaw(requestParameters: CashboxesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CashBoxListModel>>> {
        const queryParameters: any = {};

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/cashboxes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CashBoxListModelFromJSON));
    }

    /**
     */
    async cashboxesGet(requestParameters: CashboxesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CashBoxListModel>> {
        const response = await this.cashboxesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async cashboxesIdDeleteRaw(requestParameters: CashboxesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cashboxesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/cashboxes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cashboxesIdDelete(requestParameters: CashboxesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cashboxesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cashboxesIdPutRaw(requestParameters: CashboxesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cashboxesIdPut().'
            );
        }

        if (requestParameters['cashBoxCreateModel'] == null) {
            throw new runtime.RequiredError(
                'cashBoxCreateModel',
                'Required parameter "cashBoxCreateModel" was null or undefined when calling cashboxesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/cashboxes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CashBoxCreateModelToJSON(requestParameters['cashBoxCreateModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cashboxesIdPut(requestParameters: CashboxesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cashboxesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cashboxesIdStockTakingPostRaw(requestParameters: CashboxesIdStockTakingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cashboxesIdStockTakingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/cashboxes/{id}/stock-taking`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cashboxesIdStockTakingPost(requestParameters: CashboxesIdStockTakingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.cashboxesIdStockTakingPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cashboxesPostRaw(requestParameters: CashboxesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashBoxDetailModel>> {
        if (requestParameters['cashBoxCreateModel'] == null) {
            throw new runtime.RequiredError(
                'cashBoxCreateModel',
                'Required parameter "cashBoxCreateModel" was null or undefined when calling cashboxesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/cashboxes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashBoxCreateModelToJSON(requestParameters['cashBoxCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashBoxDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async cashboxesPost(requestParameters: CashboxesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashBoxDetailModel> {
        const response = await this.cashboxesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
