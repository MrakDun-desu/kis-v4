/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpValidationProblemDetails,
  PageOfSaleItemListModel,
  SaleItemCreateModel,
  SaleItemDetailModel,
} from '../models/index';
import {
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    PageOfSaleItemListModelFromJSON,
    PageOfSaleItemListModelToJSON,
    SaleItemCreateModelFromJSON,
    SaleItemCreateModelToJSON,
    SaleItemDetailModelFromJSON,
    SaleItemDetailModelToJSON,
} from '../models/index';

export interface SaleItemsGetRequest {
    page?: number;
    pageSize?: number;
    deleted?: boolean;
    categoryId?: number;
    showOnWeb?: boolean;
}

export interface SaleItemsIdDeleteRequest {
    id: number;
}

export interface SaleItemsIdPutRequest {
    id: number;
    saleItemCreateModel: SaleItemCreateModel;
}

export interface SaleItemsPostRequest {
    saleItemCreateModel: SaleItemCreateModel;
}

export interface SaleItemsReadRequest {
    id: number;
}

/**
 * 
 */
export class SaleItemsApi extends runtime.BaseAPI {

    /**
     */
    async saleItemsGetRaw(requestParameters: SaleItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfSaleItemListModel>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['showOnWeb'] != null) {
            queryParameters['showOnWeb'] = requestParameters['showOnWeb'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfSaleItemListModelFromJSON(jsonValue));
    }

    /**
     */
    async saleItemsGet(requestParameters: SaleItemsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfSaleItemListModel> {
        const response = await this.saleItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleItemsIdDeleteRaw(requestParameters: SaleItemsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleItemDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling saleItemsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleItemsIdDelete(requestParameters: SaleItemsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleItemDetailModel> {
        const response = await this.saleItemsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleItemsIdPutRaw(requestParameters: SaleItemsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleItemDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling saleItemsIdPut().'
            );
        }

        if (requestParameters['saleItemCreateModel'] == null) {
            throw new runtime.RequiredError(
                'saleItemCreateModel',
                'Required parameter "saleItemCreateModel" was null or undefined when calling saleItemsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SaleItemCreateModelToJSON(requestParameters['saleItemCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleItemsIdPut(requestParameters: SaleItemsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleItemDetailModel> {
        const response = await this.saleItemsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleItemsPostRaw(requestParameters: SaleItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleItemDetailModel>> {
        if (requestParameters['saleItemCreateModel'] == null) {
            throw new runtime.RequiredError(
                'saleItemCreateModel',
                'Required parameter "saleItemCreateModel" was null or undefined when calling saleItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-items`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaleItemCreateModelToJSON(requestParameters['saleItemCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleItemsPost(requestParameters: SaleItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleItemDetailModel> {
        const response = await this.saleItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleItemsReadRaw(requestParameters: SaleItemsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleItemDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling saleItemsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleItemsRead(requestParameters: SaleItemsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleItemDetailModel> {
        const response = await this.saleItemsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
