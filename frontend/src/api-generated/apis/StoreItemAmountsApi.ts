/* tslint:disable */
/* eslint-disable */
/**
 * KISv4 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpValidationProblemDetails,
  PageOfSaleItemAmountListModel,
} from '../models/index';
import {
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    PageOfSaleItemAmountListModelFromJSON,
    PageOfSaleItemAmountListModelToJSON,
} from '../models/index';

export interface StoreItemAmountsGetRequest {
    storeId: number;
    page?: number;
    pageSize?: number;
    categoryId?: number;
}

/**
 * 
 */
export class StoreItemAmountsApi extends runtime.BaseAPI {

    /**
     */
    async storeItemAmountsGetRaw(requestParameters: StoreItemAmountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfSaleItemAmountListModel>> {
        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling storeItemAmountsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['storeId'] != null) {
            queryParameters['storeId'] = requestParameters['storeId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-item-amounts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfSaleItemAmountListModelFromJSON(jsonValue));
    }

    /**
     */
    async storeItemAmountsGet(requestParameters: StoreItemAmountsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfSaleItemAmountListModel> {
        const response = await this.storeItemAmountsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
