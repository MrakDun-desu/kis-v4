/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryCreateModel,
  CategoryListModel,
} from '../models/index';
import {
    CategoryCreateModelFromJSON,
    CategoryCreateModelToJSON,
    CategoryListModelFromJSON,
    CategoryListModelToJSON,
} from '../models/index';

export interface CategoriesIdDeleteRequest {
    id: number;
}

export interface CategoriesIdPutRequest {
    id: number;
    categoryCreateModel: CategoryCreateModel;
}

export interface CategoriesPostRequest {
    categoryCreateModel: CategoryCreateModel;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     */
    async categoriesIdDeleteRaw(requestParameters: CategoriesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling categoriesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/categories/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async categoriesIdDelete(requestParameters: CategoriesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.categoriesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async categoriesIdPutRaw(requestParameters: CategoriesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling categoriesIdPut().'
            );
        }

        if (requestParameters['categoryCreateModel'] == null) {
            throw new runtime.RequiredError(
                'categoryCreateModel',
                'Required parameter "categoryCreateModel" was null or undefined when calling categoriesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/categories/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryCreateModelToJSON(requestParameters['categoryCreateModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async categoriesIdPut(requestParameters: CategoriesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.categoriesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async categoriesPostRaw(requestParameters: CategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryListModel>> {
        if (requestParameters['categoryCreateModel'] == null) {
            throw new runtime.RequiredError(
                'categoryCreateModel',
                'Required parameter "categoryCreateModel" was null or undefined when calling categoriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/categories`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryCreateModelToJSON(requestParameters['categoryCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryListModelFromJSON(jsonValue));
    }

    /**
     */
    async categoriesPost(requestParameters: CategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryListModel> {
        const response = await this.categoriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async categoryReadAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CategoryListModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/categories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryListModelFromJSON));
    }

    /**
     */
    async categoryReadAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CategoryListModel>> {
        const response = await this.categoryReadAllRaw(initOverrides);
        return await response.value();
    }

}
