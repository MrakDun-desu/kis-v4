/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PipeCreateModel,
  PipeListModel2,
} from '../models/index';
import {
    PipeCreateModelFromJSON,
    PipeCreateModelToJSON,
    PipeListModel2FromJSON,
    PipeListModel2ToJSON,
} from '../models/index';

export interface PipesIdDeleteRequest {
    id: number;
}

export interface PipesIdPutRequest {
    id: number;
    pipeCreateModel: PipeCreateModel;
}

export interface PipesPostRequest {
    pipeCreateModel: PipeCreateModel;
}

/**
 * 
 */
export class PipesApi extends runtime.BaseAPI {

    /**
     */
    async pipesIdDeleteRaw(requestParameters: PipesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/pipes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pipesIdDelete(requestParameters: PipesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pipesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pipesIdPutRaw(requestParameters: PipesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipeListModel2>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pipesIdPut().'
            );
        }

        if (requestParameters['pipeCreateModel'] == null) {
            throw new runtime.RequiredError(
                'pipeCreateModel',
                'Required parameter "pipeCreateModel" was null or undefined when calling pipesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/pipes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PipeCreateModelToJSON(requestParameters['pipeCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipeListModel2FromJSON(jsonValue));
    }

    /**
     */
    async pipesIdPut(requestParameters: PipesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipeListModel2> {
        const response = await this.pipesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pipesPostRaw(requestParameters: PipesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipeListModel2>> {
        if (requestParameters['pipeCreateModel'] == null) {
            throw new runtime.RequiredError(
                'pipeCreateModel',
                'Required parameter "pipeCreateModel" was null or undefined when calling pipesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/pipes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PipeCreateModelToJSON(requestParameters['pipeCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipeListModel2FromJSON(jsonValue));
    }

    /**
     */
    async pipesPost(requestParameters: PipesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipeListModel2> {
        const response = await this.pipesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pipesReadAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PipeListModel2>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/pipes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipeListModel2FromJSON));
    }

    /**
     */
    async pipesReadAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PipeListModel2>> {
        const response = await this.pipesReadAllRaw(initOverrides);
        return await response.value();
    }

}
