/* tslint:disable */
/* eslint-disable */
/**
 * KISv4 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpValidationProblemDetails,
  ModifierCreateModel,
  ModifierDetailModel,
} from '../models/index';
import {
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    ModifierCreateModelFromJSON,
    ModifierCreateModelToJSON,
    ModifierDetailModelFromJSON,
    ModifierDetailModelToJSON,
} from '../models/index';

export interface ModifiersIdDeleteRequest {
    id: number;
}

export interface ModifiersIdPutRequest {
    id: number;
    modifierCreateModel: ModifierCreateModel;
}

export interface ModifiersPostRequest {
    modifierCreateModel: ModifierCreateModel;
}

export interface ModifiersReadRequest {
    id: number;
}

/**
 * 
 */
export class ModifiersApi extends runtime.BaseAPI {

    /**
     */
    async modifiersIdDeleteRaw(requestParameters: ModifiersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModifierDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifiersIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/modifiers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModifierDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async modifiersIdDelete(requestParameters: ModifiersIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModifierDetailModel> {
        const response = await this.modifiersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modifiersIdPutRaw(requestParameters: ModifiersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModifierDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifiersIdPut().'
            );
        }

        if (requestParameters['modifierCreateModel'] == null) {
            throw new runtime.RequiredError(
                'modifierCreateModel',
                'Required parameter "modifierCreateModel" was null or undefined when calling modifiersIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/modifiers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModifierCreateModelToJSON(requestParameters['modifierCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModifierDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async modifiersIdPut(requestParameters: ModifiersIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModifierDetailModel> {
        const response = await this.modifiersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modifiersPostRaw(requestParameters: ModifiersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModifierDetailModel>> {
        if (requestParameters['modifierCreateModel'] == null) {
            throw new runtime.RequiredError(
                'modifierCreateModel',
                'Required parameter "modifierCreateModel" was null or undefined when calling modifiersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/modifiers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModifierCreateModelToJSON(requestParameters['modifierCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModifierDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async modifiersPost(requestParameters: ModifiersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModifierDetailModel> {
        const response = await this.modifiersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async modifiersReadRaw(requestParameters: ModifiersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModifierDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling modifiersRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/modifiers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModifierDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async modifiersRead(requestParameters: ModifiersReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModifierDetailModel> {
        const response = await this.modifiersReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
