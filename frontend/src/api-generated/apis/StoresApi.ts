/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StoreCreateModel,
  StoreDetailModel,
  StoreListModel,
} from '../models/index';
import {
    StoreCreateModelFromJSON,
    StoreCreateModelToJSON,
    StoreDetailModelFromJSON,
    StoreDetailModelToJSON,
    StoreListModelFromJSON,
    StoreListModelToJSON,
} from '../models/index';

export interface StoresIdDeleteRequest {
    id: number;
}

export interface StoresIdPutRequest {
    id: number;
    storeCreateModel: StoreCreateModel;
}

export interface StoresPostRequest {
    storeCreateModel: StoreCreateModel;
}

export interface StoresReadRequest {
    id: number;
}

/**
 * 
 */
export class StoresApi extends runtime.BaseAPI {

    /**
     */
    async storesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StoreListModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/stores`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoreListModelFromJSON));
    }

    /**
     */
    async storesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StoreListModel>> {
        const response = await this.storesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async storesIdDeleteRaw(requestParameters: StoresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/stores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async storesIdDelete(requestParameters: StoresIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async storesIdPutRaw(requestParameters: StoresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storesIdPut().'
            );
        }

        if (requestParameters['storeCreateModel'] == null) {
            throw new runtime.RequiredError(
                'storeCreateModel',
                'Required parameter "storeCreateModel" was null or undefined when calling storesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/stores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoreCreateModelToJSON(requestParameters['storeCreateModel']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async storesIdPut(requestParameters: StoresIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storesIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async storesPostRaw(requestParameters: StoresPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreDetailModel>> {
        if (requestParameters['storeCreateModel'] == null) {
            throw new runtime.RequiredError(
                'storeCreateModel',
                'Required parameter "storeCreateModel" was null or undefined when calling storesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/stores`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreCreateModelToJSON(requestParameters['storeCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storesPost(requestParameters: StoresPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreDetailModel> {
        const response = await this.storesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storesReadRaw(requestParameters: StoresReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storesRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/stores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storesRead(requestParameters: StoresReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreDetailModel> {
        const response = await this.storesReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
