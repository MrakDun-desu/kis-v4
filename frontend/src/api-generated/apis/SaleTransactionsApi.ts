/* tslint:disable */
/* eslint-disable */
/**
 * KISv4 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpValidationProblemDetails,
  PageOfSaleTransactionListModel,
  SaleTransactionCreateModel,
  SaleTransactionDetailModel,
  SaleTransactionListModel,
} from '../models/index';
import {
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    PageOfSaleTransactionListModelFromJSON,
    PageOfSaleTransactionListModelToJSON,
    SaleTransactionCreateModelFromJSON,
    SaleTransactionCreateModelToJSON,
    SaleTransactionDetailModelFromJSON,
    SaleTransactionDetailModelToJSON,
    SaleTransactionListModelFromJSON,
    SaleTransactionListModelToJSON,
} from '../models/index';

export interface SaleTransactionsGetRequest {
    page?: number;
    pageSize?: number;
    startDate?: Date;
    endDate?: Date;
    cancelled?: boolean;
}

export interface SaleTransactionsIdDeleteRequest {
    id: number;
}

export interface SaleTransactionsIdFinishPostRequest {
    id: number;
}

export interface SaleTransactionsIdPatchRequest {
    id: number;
    saleTransactionCreateModel: SaleTransactionCreateModel;
}

export interface SaleTransactionsPostRequest {
    saleTransactionCreateModel: SaleTransactionCreateModel;
}

export interface SaleTransactionsReadRequest {
    id: number;
}

/**
 * 
 */
export class SaleTransactionsApi extends runtime.BaseAPI {

    /**
     */
    async saleTransactionsGetRaw(requestParameters: SaleTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfSaleTransactionListModel>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['cancelled'] != null) {
            queryParameters['cancelled'] = requestParameters['cancelled'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfSaleTransactionListModelFromJSON(jsonValue));
    }

    /**
     */
    async saleTransactionsGet(requestParameters: SaleTransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfSaleTransactionListModel> {
        const response = await this.saleTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleTransactionsIdDeleteRaw(requestParameters: SaleTransactionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleTransactionDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling saleTransactionsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleTransactionsIdDelete(requestParameters: SaleTransactionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleTransactionDetailModel> {
        const response = await this.saleTransactionsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleTransactionsIdFinishPostRaw(requestParameters: SaleTransactionsIdFinishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleTransactionDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling saleTransactionsIdFinishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-transactions/{id}/finish`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleTransactionsIdFinishPost(requestParameters: SaleTransactionsIdFinishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleTransactionDetailModel> {
        const response = await this.saleTransactionsIdFinishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleTransactionsIdPatchRaw(requestParameters: SaleTransactionsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleTransactionDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling saleTransactionsIdPatch().'
            );
        }

        if (requestParameters['saleTransactionCreateModel'] == null) {
            throw new runtime.RequiredError(
                'saleTransactionCreateModel',
                'Required parameter "saleTransactionCreateModel" was null or undefined when calling saleTransactionsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SaleTransactionCreateModelToJSON(requestParameters['saleTransactionCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleTransactionsIdPatch(requestParameters: SaleTransactionsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleTransactionDetailModel> {
        const response = await this.saleTransactionsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleTransactionsPostRaw(requestParameters: SaleTransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleTransactionDetailModel>> {
        if (requestParameters['saleTransactionCreateModel'] == null) {
            throw new runtime.RequiredError(
                'saleTransactionCreateModel',
                'Required parameter "saleTransactionCreateModel" was null or undefined when calling saleTransactionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaleTransactionCreateModelToJSON(requestParameters['saleTransactionCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleTransactionsPost(requestParameters: SaleTransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleTransactionDetailModel> {
        const response = await this.saleTransactionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleTransactionsReadRaw(requestParameters: SaleTransactionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaleTransactionDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling saleTransactionsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async saleTransactionsRead(requestParameters: SaleTransactionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaleTransactionDetailModel> {
        const response = await this.saleTransactionsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saleTransactionsSelfCancellableGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SaleTransactionListModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/sale-transactions/self-cancellable`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SaleTransactionListModelFromJSON));
    }

    /**
     */
    async saleTransactionsSelfCancellableGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SaleTransactionListModel>> {
        const response = await this.saleTransactionsSelfCancellableGetRaw(initOverrides);
        return await response.value();
    }

}
