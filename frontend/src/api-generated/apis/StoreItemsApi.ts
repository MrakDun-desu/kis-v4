/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpValidationProblemDetails,
  PageOfStoreItemListModel,
  StoreItemCreateModel,
  StoreItemDetailModel,
} from '../models/index';
import {
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    PageOfStoreItemListModelFromJSON,
    PageOfStoreItemListModelToJSON,
    StoreItemCreateModelFromJSON,
    StoreItemCreateModelToJSON,
    StoreItemDetailModelFromJSON,
    StoreItemDetailModelToJSON,
} from '../models/index';

export interface StoreItemsGetRequest {
    page?: number;
    pageSize?: number;
    deleted?: boolean;
    categoryId?: number;
    storeId?: number;
}

export interface StoreItemsIdDeleteRequest {
    id: number;
}

export interface StoreItemsIdPutRequest {
    id: number;
    storeItemCreateModel: StoreItemCreateModel;
}

export interface StoreItemsPostRequest {
    storeItemCreateModel: StoreItemCreateModel;
}

export interface StoreItemsReadRequest {
    id: number;
}

/**
 * 
 */
export class StoreItemsApi extends runtime.BaseAPI {

    /**
     */
    async storeItemsGetRaw(requestParameters: StoreItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfStoreItemListModel>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['deleted'] != null) {
            queryParameters['deleted'] = requestParameters['deleted'];
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['storeId'] != null) {
            queryParameters['storeId'] = requestParameters['storeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfStoreItemListModelFromJSON(jsonValue));
    }

    /**
     */
    async storeItemsGet(requestParameters: StoreItemsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfStoreItemListModel> {
        const response = await this.storeItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeItemsIdDeleteRaw(requestParameters: StoreItemsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreItemDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeItemsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storeItemsIdDelete(requestParameters: StoreItemsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreItemDetailModel> {
        const response = await this.storeItemsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeItemsIdPutRaw(requestParameters: StoreItemsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreItemDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeItemsIdPut().'
            );
        }

        if (requestParameters['storeItemCreateModel'] == null) {
            throw new runtime.RequiredError(
                'storeItemCreateModel',
                'Required parameter "storeItemCreateModel" was null or undefined when calling storeItemsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoreItemCreateModelToJSON(requestParameters['storeItemCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storeItemsIdPut(requestParameters: StoreItemsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreItemDetailModel> {
        const response = await this.storeItemsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeItemsPostRaw(requestParameters: StoreItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreItemDetailModel>> {
        if (requestParameters['storeItemCreateModel'] == null) {
            throw new runtime.RequiredError(
                'storeItemCreateModel',
                'Required parameter "storeItemCreateModel" was null or undefined when calling storeItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-items`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreItemCreateModelToJSON(requestParameters['storeItemCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storeItemsPost(requestParameters: StoreItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreItemDetailModel> {
        const response = await this.storeItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeItemsReadRaw(requestParameters: StoreItemsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreItemDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeItemsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreItemDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storeItemsRead(requestParameters: StoreItemsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreItemDetailModel> {
        const response = await this.storeItemsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
