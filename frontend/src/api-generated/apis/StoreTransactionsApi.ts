/* tslint:disable */
/* eslint-disable */
/**
 * KISv4 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HttpValidationProblemDetails,
  PageOfStoreTransactionListModel,
  StoreTransactionCreateModel,
  StoreTransactionDetailModel,
  StoreTransactionListModel,
} from '../models/index';
import {
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    PageOfStoreTransactionListModelFromJSON,
    PageOfStoreTransactionListModelToJSON,
    StoreTransactionCreateModelFromJSON,
    StoreTransactionCreateModelToJSON,
    StoreTransactionDetailModelFromJSON,
    StoreTransactionDetailModelToJSON,
    StoreTransactionListModelFromJSON,
    StoreTransactionListModelToJSON,
} from '../models/index';

export interface StoreTransactionsGetRequest {
    page?: number;
    pageSize?: number;
    startDate?: Date;
    endDate?: Date;
    cancelled?: boolean;
}

export interface StoreTransactionsIdDeleteRequest {
    id: number;
}

export interface StoreTransactionsPostRequest {
    storeTransactionCreateModel: StoreTransactionCreateModel;
}

export interface StoreTransactionsReadRequest {
    id: number;
}

/**
 * 
 */
export class StoreTransactionsApi extends runtime.BaseAPI {

    /**
     */
    async storeTransactionsGetRaw(requestParameters: StoreTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfStoreTransactionListModel>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['cancelled'] != null) {
            queryParameters['cancelled'] = requestParameters['cancelled'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageOfStoreTransactionListModelFromJSON(jsonValue));
    }

    /**
     */
    async storeTransactionsGet(requestParameters: StoreTransactionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfStoreTransactionListModel> {
        const response = await this.storeTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeTransactionsIdDeleteRaw(requestParameters: StoreTransactionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreTransactionDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeTransactionsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storeTransactionsIdDelete(requestParameters: StoreTransactionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreTransactionDetailModel> {
        const response = await this.storeTransactionsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeTransactionsPostRaw(requestParameters: StoreTransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreTransactionDetailModel>> {
        if (requestParameters['storeTransactionCreateModel'] == null) {
            throw new runtime.RequiredError(
                'storeTransactionCreateModel',
                'Required parameter "storeTransactionCreateModel" was null or undefined when calling storeTransactionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreTransactionCreateModelToJSON(requestParameters['storeTransactionCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storeTransactionsPost(requestParameters: StoreTransactionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreTransactionDetailModel> {
        const response = await this.storeTransactionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeTransactionsReadRaw(requestParameters: StoreTransactionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreTransactionDetailModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeTransactionsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-transactions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreTransactionDetailModelFromJSON(jsonValue));
    }

    /**
     */
    async storeTransactionsRead(requestParameters: StoreTransactionsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreTransactionDetailModel> {
        const response = await this.storeTransactionsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async storeTransactionsSelfCancellableGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StoreTransactionListModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/store-transactions/self-cancellable`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoreTransactionListModelFromJSON));
    }

    /**
     */
    async storeTransactionsSelfCancellableGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StoreTransactionListModel>> {
        const response = await this.storeTransactionsSelfCancellableGetRaw(initOverrides);
        return await response.value();
    }

}
