/* tslint:disable */
/* eslint-disable */
/**
 * App | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrencyCreateModel,
  CurrencyListModel,
} from '../models/index';
import {
    CurrencyCreateModelFromJSON,
    CurrencyCreateModelToJSON,
    CurrencyListModelFromJSON,
    CurrencyListModelToJSON,
} from '../models/index';

export interface CurrenciesIdPutRequest {
    id: number;
    currencyCreateModel: CurrencyCreateModel;
}

export interface CurrenciesPostRequest {
    currencyCreateModel: CurrencyCreateModel;
}

/**
 * 
 */
export class CurrenciesApi extends runtime.BaseAPI {

    /**
     */
    async currenciesIdPutRaw(requestParameters: CurrenciesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyListModel>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling currenciesIdPut().'
            );
        }

        if (requestParameters['currencyCreateModel'] == null) {
            throw new runtime.RequiredError(
                'currencyCreateModel',
                'Required parameter "currencyCreateModel" was null or undefined when calling currenciesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/currencies/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyCreateModelToJSON(requestParameters['currencyCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyListModelFromJSON(jsonValue));
    }

    /**
     */
    async currenciesIdPut(requestParameters: CurrenciesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyListModel> {
        const response = await this.currenciesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async currenciesPostRaw(requestParameters: CurrenciesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyListModel>> {
        if (requestParameters['currencyCreateModel'] == null) {
            throw new runtime.RequiredError(
                'currencyCreateModel',
                'Required parameter "currencyCreateModel" was null or undefined when calling currenciesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/currencies`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyCreateModelToJSON(requestParameters['currencyCreateModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyListModelFromJSON(jsonValue));
    }

    /**
     */
    async currenciesPost(requestParameters: CurrenciesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyListModel> {
        const response = await this.currenciesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async currencyReadAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CurrencyListModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/currencies`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CurrencyListModelFromJSON));
    }

    /**
     */
    async currencyReadAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CurrencyListModel>> {
        const response = await this.currencyReadAllRaw(initOverrides);
        return await response.value();
    }

}
