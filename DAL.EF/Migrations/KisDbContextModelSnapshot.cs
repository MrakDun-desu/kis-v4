// <auto-generated />
using System;
using KisV4.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KisV4.DAL.EF.Migrations
{
    [DbContext(typeof(KisDbContext))]
    partial class KisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.DAL.EF.Entities.AccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CompositionEntity", b =>
                {
                    b.Property<int>("SaleItemId")
                        .HasColumnType("integer");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasPrecision(11, 2)
                        .HasColumnType("numeric(11,2)");

                    b.HasKey("SaleItemId", "StoreItemId");

                    b.HasIndex("StoreItemId");

                    b.ToTable("Compositions");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CurrencyChangeEntity", b =>
                {
                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<int>("SaleTransactionId")
                        .HasColumnType("integer");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasPrecision(11, 2)
                        .HasColumnType("numeric(11,2)");

                    b.HasKey("CurrencyId", "SaleTransactionId", "AccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("SaleTransactionId");

                    b.ToTable("CurrencyChanges");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CurrencyCostEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(11, 2)
                        .HasColumnType("numeric(11,2)");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.ToTable("CurrencyCosts");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.DiscountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.DiscountUsageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscountUsages");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.DiscountUsageItemEntity", b =>
                {
                    b.Property<int>("DiscountUsageId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<int>("SaleTransactionItemId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasPrecision(11, 2)
                        .HasColumnType("numeric(11,2)");

                    b.HasKey("DiscountUsageId", "CurrencyId", "SaleTransactionItemId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SaleTransactionItemId");

                    b.ToTable("DiscountUsageItems");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.IncompleteTransactionEntity", b =>
                {
                    b.Property<int>("SaleTransactionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("SaleTransactionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("IncompleteTransactions");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.PipeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pipes");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.ProductCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleTransactionItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemAmount")
                        .HasColumnType("integer");

                    b.Property<int>("SaleItemId")
                        .HasColumnType("integer");

                    b.Property<int>("SaleTransactionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SaleItemId");

                    b.HasIndex("SaleTransactionId");

                    b.ToTable("SaleTransactionItems");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StockTakingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CashboxId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CashboxId");

                    b.ToTable("StockTakings");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stores", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreTransactionItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ItemAmount")
                        .HasPrecision(11, 2)
                        .HasColumnType("numeric(11,2)");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("integer");

                    b.Property<int>("StoreTransactionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("StoreTransactionId");

                    b.ToTable("StoreTransactionItems");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.TransactionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<int?>("ResponsibleUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("Transactions", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.TransactionPriceEntity", b =>
                {
                    b.Property<int>("SaleTransactionItemId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasPrecision(11, 2)
                        .HasColumnType("numeric(11,2)");

                    b.HasKey("SaleTransactionItemId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("TransactionPrices");
                });

            modelBuilder.Entity("ModifierApplications", b =>
                {
                    b.Property<int>("ApplicationsId")
                        .HasColumnType("integer");

                    b.Property<int>("ModifiersId")
                        .HasColumnType("integer");

                    b.HasKey("ApplicationsId", "ModifiersId");

                    b.HasIndex("ModifiersId");

                    b.ToTable("ModifierApplications");
                });

            modelBuilder.Entity("ProductInCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductInCategory");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CashBoxEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.AccountEntity");

                    b.ToTable("CashBoxes", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.UserAccountEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.AccountEntity");

                    b.ToTable("UserAccounts", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleItemEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.ProductEntity");

                    b.Property<bool>("ShowOnWeb")
                        .HasColumnType("boolean");

                    b.ToTable("SaleItems", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreItemEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.ProductEntity");

                    b.Property<bool>("BarmanCanStock")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsContainerItem")
                        .HasColumnType("boolean");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("StoreItems", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.ContainerEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.StoreEntity");

                    b.Property<int>("ContainedItemId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OpenSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PipeId")
                        .HasColumnType("integer");

                    b.HasIndex("ContainedItemId");

                    b.HasIndex("PipeId");

                    b.ToTable("Containers", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleTransactionEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.TransactionEntity");

                    b.ToTable("SaleTransactions", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreTransactionEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.TransactionEntity");

                    b.Property<int?>("SaleTransactionId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionReason")
                        .HasColumnType("integer");

                    b.HasIndex("SaleTransactionId");

                    b.ToTable("StoreTransactions", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.ModifierEntity", b =>
                {
                    b.HasBaseType("App.DAL.EF.Entities.SaleItemEntity");

                    b.Property<int>("ModificationTargetId")
                        .HasColumnType("integer");

                    b.HasIndex("ModificationTargetId");

                    b.ToTable("Modifiers", (string)null);
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CompositionEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.SaleItemEntity", "SaleItem")
                        .WithMany("Composition")
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.StoreItemEntity", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleItem");

                    b.Navigation("StoreItem");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CurrencyChangeEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.AccountEntity", "Account")
                        .WithMany("CurrencyChanges")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.SaleTransactionEntity", "SaleTransaction")
                        .WithMany("CurrencyChanges")
                        .HasForeignKey("SaleTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("SaleTransaction");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CurrencyCostEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.ProductEntity", "Product")
                        .WithMany("Costs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.DiscountUsageEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.DiscountEntity", "Discount")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.UserAccountEntity", "User")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.DiscountUsageItemEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.DiscountUsageEntity", "DiscountUsage")
                        .WithMany("UsageItems")
                        .HasForeignKey("DiscountUsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.SaleTransactionItemEntity", "SaleTransactionItem")
                        .WithMany("DiscountUsageItems")
                        .HasForeignKey("SaleTransactionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("DiscountUsage");

                    b.Navigation("SaleTransactionItem");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.IncompleteTransactionEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.SaleTransactionEntity", "SaleTransaction")
                        .WithMany()
                        .HasForeignKey("SaleTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.UserAccountEntity", "User")
                        .WithMany("IncompleteTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleTransaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleTransactionItemEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.SaleItemEntity", "SaleItem")
                        .WithMany("SaleTransactionItems")
                        .HasForeignKey("SaleItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.SaleTransactionEntity", "SaleTransaction")
                        .WithMany("SaleTransactionItems")
                        .HasForeignKey("SaleTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleItem");

                    b.Navigation("SaleTransaction");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StockTakingEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.CashBoxEntity", "Cashbox")
                        .WithMany("StockTakings")
                        .HasForeignKey("CashboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashbox");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreTransactionItemEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.StoreEntity", "Store")
                        .WithMany("StoreTransactionItems")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.StoreItemEntity", "StoreItem")
                        .WithMany("StoreTransactionItems")
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.StoreTransactionEntity", "StoreTransaction")
                        .WithMany()
                        .HasForeignKey("StoreTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("StoreItem");

                    b.Navigation("StoreTransaction");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.TransactionEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.UserAccountEntity", "ResponsibleUser")
                        .WithMany("Transactions")
                        .HasForeignKey("ResponsibleUserId");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.TransactionPriceEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.SaleTransactionItemEntity", "SaleTransactionItem")
                        .WithMany("TransactionPrices")
                        .HasForeignKey("SaleTransactionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("SaleTransactionItem");
                });

            modelBuilder.Entity("ModifierApplications", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.SaleTransactionItemEntity", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.ModifierEntity", null)
                        .WithMany()
                        .HasForeignKey("ModifiersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductInCategory", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.ProductCategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.ProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CashBoxEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.AccountEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.CashBoxEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.UserAccountEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.AccountEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.UserAccountEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleItemEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.ProductEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.SaleItemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreItemEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.ProductEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.StoreItemEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.ContainerEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.StoreItemEntity", "ContainedItem")
                        .WithMany()
                        .HasForeignKey("ContainedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.StoreEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.ContainerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.PipeEntity", "Pipe")
                        .WithMany()
                        .HasForeignKey("PipeId");

                    b.Navigation("ContainedItem");

                    b.Navigation("Pipe");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleTransactionEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.TransactionEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.SaleTransactionEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreTransactionEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.TransactionEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.StoreTransactionEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.SaleTransactionEntity", "SaleTransaction")
                        .WithMany("StoreTransactions")
                        .HasForeignKey("SaleTransactionId");

                    b.Navigation("SaleTransaction");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.ModifierEntity", b =>
                {
                    b.HasOne("App.DAL.EF.Entities.SaleItemEntity", null)
                        .WithOne()
                        .HasForeignKey("App.DAL.EF.Entities.ModifierEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.DAL.EF.Entities.SaleItemEntity", "ModificationTarget")
                        .WithMany("AvailableModifiers")
                        .HasForeignKey("ModificationTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModificationTarget");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.AccountEntity", b =>
                {
                    b.Navigation("CurrencyChanges");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.DiscountEntity", b =>
                {
                    b.Navigation("DiscountUsages");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.DiscountUsageEntity", b =>
                {
                    b.Navigation("UsageItems");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.ProductEntity", b =>
                {
                    b.Navigation("Costs");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleTransactionItemEntity", b =>
                {
                    b.Navigation("DiscountUsageItems");

                    b.Navigation("TransactionPrices");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreEntity", b =>
                {
                    b.Navigation("StoreTransactionItems");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.CashBoxEntity", b =>
                {
                    b.Navigation("StockTakings");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.UserAccountEntity", b =>
                {
                    b.Navigation("DiscountUsages");

                    b.Navigation("IncompleteTransactions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleItemEntity", b =>
                {
                    b.Navigation("AvailableModifiers");

                    b.Navigation("Composition");

                    b.Navigation("SaleTransactionItems");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.StoreItemEntity", b =>
                {
                    b.Navigation("StoreTransactionItems");
                });

            modelBuilder.Entity("App.DAL.EF.Entities.SaleTransactionEntity", b =>
                {
                    b.Navigation("CurrencyChanges");

                    b.Navigation("SaleTransactionItems");

                    b.Navigation("StoreTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
